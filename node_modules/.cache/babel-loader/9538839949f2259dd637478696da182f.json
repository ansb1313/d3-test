{"ast":null,"code":"import _slicedToArray from \"/Users/apple/Downloads/react-d3-tree-with-material-ui-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useCallback, useState } from \"react\";\nexport var useCenteredTree = function useCenteredTree() {\n  var defaultTranslate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    x: 0,\n    y: 0\n  };\n\n  var _useState = useState(defaultTranslate),\n      _useState2 = _slicedToArray(_useState, 2),\n      translate = _useState2[0],\n      setTranslate = _useState2[1];\n\n  var containerRef = useCallback(function (containerElem) {\n    if (containerElem !== null) {\n      var _containerElem$getBou = containerElem.getBoundingClientRect(),\n          width = _containerElem$getBou.width,\n          height = _containerElem$getBou.height;\n\n      setTranslate({\n        x: width / 2,\n        y: height / 2\n      });\n    }\n  }, []);\n  return [translate, containerRef];\n};","map":{"version":3,"sources":["/Users/apple/Downloads/react-d3-tree-with-material-ui-forked/src/helpers.js"],"names":["useCallback","useState","useCenteredTree","defaultTranslate","x","y","translate","setTranslate","containerRef","containerElem","getBoundingClientRect","width","height"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAEA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAuC;AAAA,MAAtCC,gBAAsC,uEAAnB;AAAEC,IAAAA,CAAC,EAAE,CAAL;AAAQC,IAAAA,CAAC,EAAE;AAAX,GAAmB;;AACpE,kBAAkCJ,QAAQ,CAACE,gBAAD,CAA1C;AAAA;AAAA,MAAOG,SAAP;AAAA,MAAkBC,YAAlB;;AACA,MAAMC,YAAY,GAAGR,WAAW,CAAC,UAACS,aAAD,EAAmB;AAClD,QAAIA,aAAa,KAAK,IAAtB,EAA4B;AAC1B,kCAA0BA,aAAa,CAACC,qBAAd,EAA1B;AAAA,UAAQC,KAAR,yBAAQA,KAAR;AAAA,UAAeC,MAAf,yBAAeA,MAAf;;AACAL,MAAAA,YAAY,CAAC;AAAEH,QAAAA,CAAC,EAAEO,KAAK,GAAG,CAAb;AAAgBN,QAAAA,CAAC,EAAEO,MAAM,GAAG;AAA5B,OAAD,CAAZ;AACD;AACF,GAL+B,EAK7B,EAL6B,CAAhC;AAMA,SAAO,CAACN,SAAD,EAAYE,YAAZ,CAAP;AACD,CATM","sourcesContent":["import { useCallback, useState } from \"react\";\n\nexport const useCenteredTree = (defaultTranslate = { x: 0, y: 0 }) => {\n  const [translate, setTranslate] = useState(defaultTranslate);\n  const containerRef = useCallback((containerElem) => {\n    if (containerElem !== null) {\n      const { width, height } = containerElem.getBoundingClientRect();\n      setTranslate({ x: width / 2, y: height / 2 });\n    }\n  }, []);\n  return [translate, containerRef];\n};\n"]},"metadata":{},"sourceType":"module"}